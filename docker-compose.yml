services:
  db:
    image: postgres:14-alpine
    container_name: property_api_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-property_listings}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-property_listings}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - property_network

  api:
    build: .
    container_name: property_api_app
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-property_listings}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      UPLOAD_DIR: ${UPLOAD_DIR:-/app/uploads}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app:ro
      - uploads_data:/app/uploads
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - property_network
    restart: unless-stopped

  # Migration service for running database migrations
  migrate:
    build: .
    container_name: property_api_migrate
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-property_listings}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    volumes:
      - ./app:/app/app:ro
      - ./alembic:/app/alembic:ro
      - ./migrate.py:/app/migrate.py:ro
      - ./alembic.ini:/app/alembic.ini:ro
    depends_on:
      db:
        condition: service_healthy
    networks:
      - property_network
    profiles:
      - migration
    command: ["python", "migrate.py", "migrate"]

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local

networks:
  property_network:
    driver: bridge