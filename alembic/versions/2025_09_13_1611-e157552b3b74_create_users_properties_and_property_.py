"""Create users, properties, and property_images tables with indexes

Revision ID: e157552b3b74
Revises: 1cf1356dadf9
Create Date: 2025-09-13 16:11:59.083315

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e157552b3b74'
down_revision: Union[str, None] = '1cf1356dadf9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create enum types if they don't exist
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE userrole AS ENUM ('AGENT', 'ADMIN');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE propertytype AS ENUM ('RENTAL', 'SALE');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False, comment='User email address - must be unique and valid'),
    sa.Column('hashed_password', sa.String(length=255), nullable=False, comment='Bcrypt hashed password'),
    sa.Column('full_name', sa.String(length=255), nullable=False, comment="User's full name"),
    sa.Column('role', sa.Enum('AGENT', 'ADMIN', name='userrole'), nullable=False, comment='User role for access control'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the user account is active'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_is_active'), 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_updated_at'), 'users', ['updated_at'], unique=False)
    op.create_table('properties',
    sa.Column('title', sa.String(length=255), nullable=False, comment='Property listing title'),
    sa.Column('description', sa.Text(), nullable=False, comment='Detailed property description'),
    sa.Column('property_type', sa.Enum('RENTAL', 'SALE', name='propertytype'), nullable=False, comment='Property type - rental or sale'),
    sa.Column('price', sa.Numeric(precision=12, scale=2), nullable=False, comment='Property price in local currency'),
    sa.Column('bedrooms', sa.Integer(), nullable=False, comment='Number of bedrooms'),
    sa.Column('bathrooms', sa.Integer(), nullable=False, comment='Number of bathrooms'),
    sa.Column('area_sqft', sa.Integer(), nullable=False, comment='Property area in square feet'),
    sa.Column('location', sa.String(length=255), nullable=False, comment='Property location/address'),
    sa.Column('latitude', sa.Numeric(precision=10, scale=8), nullable=True, comment='Property latitude coordinate'),
    sa.Column('longitude', sa.Numeric(precision=11, scale=8), nullable=True, comment='Property longitude coordinate'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the property listing is active'),
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='ID of the agent who owns this property'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_properties_agent_active', 'properties', ['agent_id', 'is_active', sa.text('updated_at DESC')], unique=False)
    op.create_index('idx_properties_bedrooms_price', 'properties', ['bedrooms', 'price', 'is_active'], unique=False)
    op.create_index('idx_properties_coordinates', 'properties', ['latitude', 'longitude'], unique=False, postgresql_where=sa.text('latitude IS NOT NULL AND longitude IS NOT NULL'))
    op.create_index('idx_properties_location_price', 'properties', ['location', 'price', 'is_active'], unique=False)
    op.create_index('idx_properties_search_optimization', 'properties', ['location', 'price', 'bedrooms', 'property_type', 'is_active'], unique=False)
    op.create_index('idx_properties_type_active', 'properties', ['property_type', 'is_active', sa.text('created_at DESC')], unique=False)
    op.create_index(op.f('ix_properties_agent_id'), 'properties', ['agent_id'], unique=False)
    op.create_index(op.f('ix_properties_bedrooms'), 'properties', ['bedrooms'], unique=False)
    op.create_index(op.f('ix_properties_created_at'), 'properties', ['created_at'], unique=False)
    op.create_index(op.f('ix_properties_id'), 'properties', ['id'], unique=False)
    op.create_index(op.f('ix_properties_is_active'), 'properties', ['is_active'], unique=False)
    op.create_index(op.f('ix_properties_location'), 'properties', ['location'], unique=False)
    op.create_index(op.f('ix_properties_price'), 'properties', ['price'], unique=False)
    op.create_index(op.f('ix_properties_property_type'), 'properties', ['property_type'], unique=False)
    op.create_index(op.f('ix_properties_title'), 'properties', ['title'], unique=False)
    op.create_index(op.f('ix_properties_updated_at'), 'properties', ['updated_at'], unique=False)
    op.create_table('property_images',
    sa.Column('property_id', sa.UUID(), nullable=False, comment='ID of the property this image belongs to'),
    sa.Column('filename', sa.String(length=255), nullable=False, comment='Original filename of the uploaded image'),
    sa.Column('file_path', sa.String(length=500), nullable=False, comment='Relative path to the stored image file'),
    sa.Column('file_size', sa.Integer(), nullable=False, comment='File size in bytes'),
    sa.Column('mime_type', sa.String(length=100), nullable=False, comment='MIME type of the image file'),
    sa.Column('width', sa.Integer(), nullable=True, comment='Image width in pixels'),
    sa.Column('height', sa.Integer(), nullable=True, comment='Image height in pixels'),
    sa.Column('is_primary', sa.Boolean(), nullable=False, comment='Whether this is the primary image for the property'),
    sa.Column('display_order', sa.Integer(), nullable=False, comment='Display order for image gallery'),
    sa.Column('upload_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the image was uploaded'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('file_path')
    )
    op.create_index('idx_property_images_file_path', 'property_images', ['file_path'], unique=False)
    op.create_index('idx_property_images_primary', 'property_images', ['property_id', 'is_primary'], unique=False, postgresql_where=sa.text('is_primary = true'))
    op.create_index('idx_property_images_property_id', 'property_images', ['property_id', sa.text('is_primary DESC'), sa.text('display_order ASC')], unique=False)
    op.create_index('idx_property_images_upload_date', 'property_images', [sa.text('upload_date DESC'), 'property_id'], unique=False)
    op.create_index(op.f('ix_property_images_created_at'), 'property_images', ['created_at'], unique=False)
    op.create_index(op.f('ix_property_images_id'), 'property_images', ['id'], unique=False)
    op.create_index(op.f('ix_property_images_is_primary'), 'property_images', ['is_primary'], unique=False)
    op.create_index(op.f('ix_property_images_property_id'), 'property_images', ['property_id'], unique=False)
    op.create_index(op.f('ix_property_images_updated_at'), 'property_images', ['updated_at'], unique=False)
    op.create_index(op.f('ix_property_images_upload_date'), 'property_images', ['upload_date'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_property_images_upload_date'), table_name='property_images')
    op.drop_index(op.f('ix_property_images_updated_at'), table_name='property_images')
    op.drop_index(op.f('ix_property_images_property_id'), table_name='property_images')
    op.drop_index(op.f('ix_property_images_is_primary'), table_name='property_images')
    op.drop_index(op.f('ix_property_images_id'), table_name='property_images')
    op.drop_index(op.f('ix_property_images_created_at'), table_name='property_images')
    op.drop_index('idx_property_images_upload_date', table_name='property_images')
    op.drop_index('idx_property_images_property_id', table_name='property_images')
    op.drop_index('idx_property_images_primary', table_name='property_images', postgresql_where=sa.text('is_primary = true'))
    op.drop_index('idx_property_images_file_path', table_name='property_images')
    op.drop_table('property_images')
    op.drop_index(op.f('ix_properties_updated_at'), table_name='properties')
    op.drop_index(op.f('ix_properties_title'), table_name='properties')
    op.drop_index(op.f('ix_properties_property_type'), table_name='properties')
    op.drop_index(op.f('ix_properties_price'), table_name='properties')
    op.drop_index(op.f('ix_properties_location'), table_name='properties')
    op.drop_index(op.f('ix_properties_is_active'), table_name='properties')
    op.drop_index(op.f('ix_properties_id'), table_name='properties')
    op.drop_index(op.f('ix_properties_created_at'), table_name='properties')
    op.drop_index(op.f('ix_properties_bedrooms'), table_name='properties')
    op.drop_index(op.f('ix_properties_agent_id'), table_name='properties')
    op.drop_index('idx_properties_type_active', table_name='properties')
    op.drop_index('idx_properties_search_optimization', table_name='properties')
    op.drop_index('idx_properties_location_price', table_name='properties')
    op.drop_index('idx_properties_coordinates', table_name='properties', postgresql_where=sa.text('latitude IS NOT NULL AND longitude IS NOT NULL'))
    op.drop_index('idx_properties_bedrooms_price', table_name='properties')
    op.drop_index('idx_properties_agent_active', table_name='properties')
    op.drop_table('properties')
    op.drop_index(op.f('ix_users_updated_at'), table_name='users')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index(op.f('ix_users_is_active'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
