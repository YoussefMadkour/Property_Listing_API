version: '3.8'

services:
  db:
    image: postgres:14-alpine
    container_name: property_api_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-property_listings}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-property_listings}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - property_network_prod
    restart: always
    # Security: Don't expose database port in production
    # ports:
    #   - "5432:5432"
    
    # Production optimizations
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: property_api_app_prod
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-property_listings}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      UPLOAD_DIR: ${UPLOAD_DIR:-/app/uploads}
      ENVIRONMENT: production
      DEBUG: false
      CORS_ORIGINS: ${CORS_ORIGINS}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      ALLOWED_FILE_TYPES: ${ALLOWED_FILE_TYPES:-image/jpeg,image/png,image/webp}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - uploads_data_prod:/app/uploads
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - property_network_prod
    restart: always
    
    # Production security and performance settings
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Security: Run as non-root user
    user: "1000:1000"
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: property_api_nginx_prod
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - uploads_data_prod:/var/www/uploads:ro
    depends_on:
      - api
    networks:
      - property_network_prod
    restart: always
    
    # Security headers and rate limiting
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Migration service for production deployments
  migrate:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: property_api_migrate_prod
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-property_listings}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ENVIRONMENT: production
    depends_on:
      db:
        condition: service_healthy
    networks:
      - property_network_prod
    profiles:
      - migration
    command: ["python", "migrate.py", "migrate"]
    restart: "no"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: property_api_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - property_network_prod
    restart: always
    profiles:
      - cache
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database backup service
  backup:
    image: postgres:14-alpine
    container_name: property_api_backup_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-property_listings}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - db
    networks:
      - property_network_prod
    profiles:
      - backup
    command: ["sh", "-c", "echo '${BACKUP_SCHEDULE} /backup.sh' | crontab - && crond -f"]
    restart: always

volumes:
  postgres_data_prod:
    driver: local
  uploads_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  property_network_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16